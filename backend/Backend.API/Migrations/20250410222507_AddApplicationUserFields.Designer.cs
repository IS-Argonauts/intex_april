// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RootkitAuth.API.Data;

#nullable disable

namespace RootkitAuth.API.Migrations
{
    [DbContext(typeof(MoviesDbContext))]
    [Migration("20250410222507_AddApplicationUserFields")]
    partial class AddApplicationUserFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RootkitAuth.API.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Amazon")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Disney")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Hulu")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Netflix")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RootkitAuth.API.Models.MoviesRating", b =>
                {
                    b.Property<string>("ShowId")
                        .HasColumnType("TEXT")
                        .HasColumnName("show_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rating");

                    b.HasKey("ShowId", "UserId");

                    b.ToTable("movies_ratings");
                });

            modelBuilder.Entity("RootkitAuth.API.Models.MoviesTitle", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Adventure")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AnimeSeriesInternationalTvShows")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Anime Series International TV Shows");

                    b.Property<int?>("BritishTvShowsDocuseriesInternationalTvShows")
                        .HasColumnType("INTEGER")
                        .HasColumnName("British TV Shows Docuseries International TV Shows");

                    b.Property<string>("Cast")
                        .HasColumnType("TEXT")
                        .HasColumnName("cast");

                    b.Property<int?>("Children")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Comedies")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ComediesDramasInternationalMovies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Comedies Dramas International Movies");

                    b.Property<int?>("ComediesInternationalMovies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Comedies International Movies");

                    b.Property<int?>("ComediesRomanticMovies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Comedies Romantic Movies");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT")
                        .HasColumnName("country");

                    b.Property<int?>("CrimeTvShowsDocuseries")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Crime TV Shows Docuseries");

                    b.Property<string>("CriticallyAcclaimed")
                        .HasColumnType("TEXT")
                        .HasColumnName("critically_acclaimed");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Director")
                        .HasColumnType("TEXT")
                        .HasColumnName("director");

                    b.Property<int?>("Documentaries")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DocumentariesInternationalMovies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Documentaries International Movies");

                    b.Property<int?>("Docuseries")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Dramas")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DramasInternationalMovies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Dramas International Movies");

                    b.Property<int?>("DramasRomanticMovies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Dramas Romantic Movies");

                    b.Property<string>("Duration")
                        .HasColumnType("TEXT")
                        .HasColumnName("duration");

                    b.Property<int?>("FamilyMovies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Family Movies");

                    b.Property<int?>("Fantasy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT")
                        .HasColumnName("genre");

                    b.Property<int?>("HorrorMovies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Horror Movies");

                    b.Property<int?>("InternationalMoviesThrillers")
                        .HasColumnType("INTEGER")
                        .HasColumnName("International Movies Thrillers");

                    b.Property<int?>("InternationalTvShowsRomanticTvShowsTvDramas")
                        .HasColumnType("INTEGER")
                        .HasColumnName("International TV Shows Romantic TV Shows TV Dramas");

                    b.Property<int?>("Kids")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LanguageTvShows")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Language TV Shows");

                    b.Property<int?>("Musicals")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NatureTv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Nature TV");

                    b.Property<string>("Rating")
                        .HasColumnType("TEXT")
                        .HasColumnName("rating");

                    b.Property<int?>("RealityTv")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Reality TV");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("release_year");

                    b.Property<string>("ShowId")
                        .HasColumnType("TEXT")
                        .HasColumnName("show_id");

                    b.Property<int?>("Spirituality")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TalkShowsTvComedies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Talk Shows TV Comedies");

                    b.Property<int?>("Thrillers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int?>("TvAction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TV Action");

                    b.Property<int?>("TvComedies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TV Comedies");

                    b.Property<int?>("TvDramas")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TV Dramas");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("movies_titles");
                });

            modelBuilder.Entity("RootkitAuth.API.Models.MoviesUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER")
                        .HasColumnName("age");

                    b.Property<int?>("Amazon")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Apple")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<int?>("Disney")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT")
                        .HasColumnName("gender");

                    b.Property<int?>("Hulu")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Max")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("Netflix")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Paramount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<int?>("Peacock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT")
                        .HasColumnName("role");

                    b.Property<string>("State")
                        .HasColumnType("TEXT")
                        .HasColumnName("state");

                    b.Property<int?>("Zip")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zip");

                    b.HasKey("UserId");

                    b.ToTable("movies_users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RootkitAuth.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RootkitAuth.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RootkitAuth.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RootkitAuth.API.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
